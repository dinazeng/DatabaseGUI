Option 1: List all items.
	1. User runs the application that reads in a JSON file that will be fed into an ArrayList<Consumable>
	2. The application will print the menu options asking user to enter an input from 1 to 7 
		#############
		# Main Menu #
		#############
		Today is: 2021-10-22
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	3. The user enters "1" and enter to run the "List All Items" option
	4. The application will print the information of each item in the ArrayList<Consumable> chronologically
		ex: Consumable Item #1
		    This is a drink item
		    Name: sadness
		    Notes: tears
		    Price: 0.00
		    Volume: 1000.00
		    Expiry Date: 0000-01-01
		   This item is expired for 738449 day(s).
	5. The application will print the menu options asking user to enter an input from 1 to 7 
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	6. Once the user enters "7" and enter, the application will export the ArrayList<Consumable> to a JSON file and exit the application; 
             system prints:("Thank you for choosing us! Have a great day <3")
* Variation # 1: Empty ArrayList<Consumable>
	1.1. The user runs the application but the JSON file is empty
	1.2. The application will print the menu options asking user to enter an input from 1 to 7 
		#############
		# Main Menu #
		#############
		Today is: 2021-10-22
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	1.3. The user does not add a new item
	1.4. The user enters "1" and enter to run the "List All Items" option while the list is still empty
	1.5. "No consumable items to show." will be printed
	1.6. The application will print the menu options asking user to enter an input from 1 to 7 
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	1.7. Once the user enters "7" and enter, the application will export the ArrayList<Consumable> to a JSON file and exit the application; 
             system prints:("Thank you for choosing us! Have a great day <3")
	
Option 2: Add Item
	1. User runs the application that reads in a JSON file that will be fed into an ArrayList<Consumable>
	2. The application will print the menu options asking user to enter an input from 1 to 7 
		#############
		# Main Menu #
		#############
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	3. The user enters "2" and enter to run the "Add Item" option
	4. The application prompts the user to enter "1" or "2" to add a food or drink item respectively.
	5. The user enters "1" or "2" depending on the item they wish to add
	6. The application prompts the user for a String response that will contain the item name("Enter the name of the new item: "). This String cannot be an empty String.
	7. The user enters the String response and presses enter.
	8. The application prompts the user for a String response that will contain the item notes("Enter the notes of the new item: "). This String can be an empty String.
	9. The user enters the String response and presses enter.
	10. The application prompts the user for a double response that will contain the item price("Enter the price of the new item: "). This double cannot be less than 0.
	11. The user enters the double response and presses enter.
	12. The application prompts the user for a double response that will contain the item amount (weight("Enter the weight of the new item: ")/volume("Enter the volume of the new item: ")). This double cannot be less than 0.
	13. The user enters the double response and presses enter.
	14. The application prompts the user for an int response that will contain the year of expiry ("Enter the year of the expiry date: "). This int cannot be less than 0.
	15. The user enters the int response and presses enter.	
	16. The application prompts the user for an int response that will contain the month of expiry ("Enter the month of the expiry date: "). This int cannot be less than 1 or greater than 12.
	17. The user enters the int response and presses enter.	
	18. The application prompts the user for an int response that will contain the day of expiry("Enter the day of the expiry date: ").
	19. The user enters the int response and presses enter.	
	20. The application will add the item to the ArrayList<Consumable> and prints the item name + "has been added to the list".
	21. The application will print the menu options asking user to enter an input from 1 to 7 
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	22. Once the user enters "7" and enter, the application will export the ArrayList<Consumable> to a JSON file and exit the application; 
             system prints:("Thank you for choosing us! Have a great day <3")

* Variation: The user enters April 31, 2002 as the expiry date
	1. User runs the application that reads in a JSON file that will be fed into an ArrayList<Consumable>
	2. The application will print the menu options asking user to enter an input from 1 to 7 
		#############
		# Main Menu #
		#############
		Today is: 2021-10-22
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	3. The user enters "2" and enter to run the "Add Item" option
	4. The application prompts the user to enter "1" or "2" to add a food or drink item respectively.
	5. The user enters "1" or "2" depending on the item they wish to add
	6. The application prompts the user for a String response that will contain the item name("Enter the name of the new item: "). This String cannot be an empty String.
	7. The user enters the String response and presses enter.
	8. The application prompts the user for a String response that will contain the item notes("Enter the notes of the new item: "). This String can be an empty String.
	9. The user enters the String response and presses enter.
	10. The application prompts the user for a double response that will contain the item price("Enter the price of the new item: "). This double cannot be less than 0.
	11. The user enters the double response and presses enter.
	12. The application prompts the user for a double response that will contain the item amount (weight("Enter the weight of the new item: ")/volume("Enter the volume of the new item: ")). This double cannot be less than 0.
	13. The user enters the double response and presses enter.
	14. The application prompts the user for an int response that will contain the year of expiry ("Enter the year of the expiry date: "). This int cannot be less than 0.
	15. The user enters "2002" and presses enter.	
	16. The application prompts the user for an int response that will contain the month of expiry ("Enter the month of the expiry date: "). This int cannot be less than 1 or greater than 12.
	17. The user enters "4" and presses enter.	
	18. The application prompts the user for an int response that will contain the day of expiry("Enter the day of the expiry date: ").
	19. The user enters "31" and presses enter.	
	20. The application will throw a DateTimeException object since April 31, 2002 is not a valid date.
	21. The application will loop back to step [14.] and prompt the user for a year ("Enter the year of the expiry date: "), repeating the process until the user enters a valid date.
	22. The application will add the item to the ArrayList<Consumable> and prints the item name + "has been added to the list".
	23. The application will print the menu options asking user to enter an input from 1 to 7
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	24. Once the user enters "7" and enter, the application will export the ArrayList<Consumable> to a JSON file and exit the application; 
             system prints:("Thank you for choosing us! Have a great day <3")	

Option 3: Remove Item
	1. User runs the application that reads in a JSON file that will be fed into an ArrayList<Consumable>
	2. The application will print the menu options asking user to enter an input from 1 to 7 
		#############
		# Main Menu #
		#############
		Today is: 2021-10-22
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	3. The user enters "3" and enter to run the "Remove An Item" option
	4. The application will print the information of each item in the ArrayList<Consumable> chronologically and label them with numbers in ascending orders starting from 1.
		ex: Consumable Item #1
		    This is a drink item
		    Name: sadness
		    Notes: tears
		    Price: 0.00
		    Volume: 1000.00
		    Expiry Date: 0000-01-01
		   This item is expired for 738449 day(s).
	5. The application will prompt the user for a number representing the item.("Enter the item number you want to remove (0 to cancel): ").
	6. The user enters a number representing the item they would like to delete and presses enter.
	7. The item will be removed from the ArrayList<Consumable>
	8. The application will print the menu options asking user to enter an input from 1 to 7 ("Choose an option by entering 1-7: ")
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	9. Once the user enters "7" and enter, the application will export the ArrayList<Consumable> to a JSON file and exit the application; 
             system prints:("Thank you for choosing us! Have a great day <3")

* Variation #1: The user chooses to not delete an item (enters 0)
	1. User runs the application that reads in a JSON file that will be fed into an ArrayList<Consumable>
	2. The application will print the menu options asking user to enter an input from 1 to 7 
		#############
		# Main Menu #
		#############
		Today is: 2021-10-22
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	3. The user enters "3" and enter to run the "Remove An Item" option
	4. The application will print the information of each item in the ArrayList<Consumable> chronologically and label them with numbers in ascending orders starting from 1.
		ex: Consumable Item #1
		    This is a drink item
		    Name: sadness
		    Notes: tears
		    Price: 0.00
		    Volume: 1000.00
		    Expiry Date: 0000-01-01
		   This item is expired for 738449 day(s).
	5. The application will prompt the user for a number representing the item.("Enter the item number you want to remove (0 to cancel): ").
	6. The user enters"0" and presses enter. 
	7. The application will print the menu options asking user to enter an input from 1 to 7 ("Choose an option by entering 1-7: ")
		1: List Items
		2: Add Item
		3: Remove Item
		4: List Expired Items
		5: List Non-Expired Items
		6: List Items Expiring in 7 Days
		7: Exit
		Choose an option by entering 1-7:
	8. Once the user enters "7" and enter, the application will export the ArrayList<Consumable> to a JSON file and exit the application; 
             system prints:("Thank you for choosing us! Have a great day <3")